// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model semesters {
  id          String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name        String
  startDate   DateTime   @map("start_date")
  conceptDate DateTime @map("concept_date")
  endDate     DateTime @map("end_date")

  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  schedules schedules[]
}

model subjects {
  id          String  @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name        String
  workload    Int
  timeCourse  Int     @map("time_course")
  description String?

  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  schedules schedules[]
}

enum TypesUser {
  ADMIN
  PROFESSOR
  STUDENT
}

model users {
  id        String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  firstName String    @map("first_name")
  lastName  String       @map("last_name")
  email     String?
  phone     String?
  type      TypesUser

  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  students   students[]
  professors professors[]
}

model classes {
  id          String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  slug        String
  name        String
  description String?
  startDate   DateTime @map("start_date")

  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  students  students[]
  schedules schedules[]
}

model students {
  id                 String  @id @default(dbgenerated()) @map("_id") @db.ObjectId
  registration       String
  institutionalEmail String? @map("institutional_email")
  isActive           Boolean @map("is_active")
  isRepresentative   Boolean @map("is_representative")
  classId            String  @map("class_id")
  userId             String  @map("user_id")

  class classes? @relation(fields: [classId], references: [id])
  user  users?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model professors {
  id                 String  @id @default(dbgenerated()) @map("_id") @db.ObjectId
  institutionalEmail String? @map("institutional_email")
  graduateArea       String? @map("graduate_area")
  searchAreas        String? @map("search_areas")
  userId             String  @map("user_id")

  user users? @relation(fields: [userId], references: [id])

  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  schedules schedules[]
}

model schedules {
  id          String  @id @default(dbgenerated()) @map("_id") @db.ObjectId
  weekday     String?
  startTime   String? @map("start_time")
  endTime     String? @map("end_time")
  classId     String  @map("class_id")
  subjectId   String  @map("subject_id")
  professorId String  @map("professor_id")
  semesterId  String  @map("semester_id")

  class     classes?    @relation(fields: [classId], references: [id])
  professor professors? @relation(fields: [professorId], references: [id])
  subject   subjects?   @relation(fields: [subjectId], references: [id])
  semester  semesters?  @relation(fields: [semesterId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}
